{"version":3,"file":"component---src-templates-category-jsx-1c16d6da4457895792a1.js","mappings":"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","sources":["webpack://sitbne-sitegen/./src/components/AuthorThumbnail/AuthorThumbnail.js","webpack://sitbne-sitegen/./src/components/PostListing/PostListing.js","webpack://sitbne-sitegen/./src/templates/category.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./AuthorThumbnail.css\";\r\nclass AuthorThumbnail extends React.Component {\r\n    render() {\r\n        const { avatar, name } = this.props;\r\n        if (avatar && name) {\r\n            return (<img className=\"author-thumb\" src={avatar} alt={name} data-pin-nopin=\"true\"/>);\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexport default AuthorThumbnail;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport AuthorThumbnail from \"../AuthorThumbnail/AuthorThumbnail\";\r\nimport PostTags from \"../PostTags/PostTags\";\r\nimport SiteConfig from \"../../../data/SiteConfig\";\r\nimport AuthorLink from \"../AuthorLink/AuthorLink\";\r\nimport PostFormatting from \"../../components/PostFormatting/PostFormatting\";\r\nimport PostHeader from \"../../components/PostHeader/PostHeader\";\r\nimport PostDate from \"../PostDate/PostDate\";\r\nimport AuthorModel from \"../../models/author-model\";\r\nimport \"./PostListing.css\";\r\nconst getPostList = (postEdges, authorEdges) => postEdges.map(postEdge => ({\r\n    path: postEdge.node.fields.slug,\r\n    tags: postEdge.node.frontmatter.tags,\r\n    cover: postEdge.node.frontmatter.cover,\r\n    title: postEdge.node.frontmatter.title,\r\n    date: postEdge.node.frontmatter.date,\r\n    author: AuthorModel.getAuthor(authorEdges, postEdge.node.frontmatter.author, SiteConfig.blogAuthorId),\r\n    excerpt: postEdge.node.excerpt,\r\n    timeToRead: postEdge.node.timeToRead\r\n}));\r\nclass PostListing extends React.Component {\r\n    render() {\r\n        const postList = getPostList(this.props.postEdges, this.props.postAuthors);\r\n        return (<div>\n        \n        {postList.map(post => {\r\n            const { title, path, excerpt, author, tags, date } = post;\r\n            const className = post.post_class ? post.post_class : \"post\";\r\n            return (<PostFormatting className={className} key={title}>\n              <PostHeader>\n                <h2 className=\"post-title\">\n                  <Link to={path}>{title}</Link>\n                </h2>\n              </PostHeader>\n              <section className=\"post-excerpt\">\n                \n                <p>\n                  {excerpt}{\" \"}\n                  <Link className=\"read-more\" to={path}>\n                    &raquo;\n                  </Link>\n                </p>\n              </section>\n              <footer className=\"post-meta\">\n                <AuthorThumbnail avatar={author.image} name={author.name}/>\n                <AuthorLink url={`/author/${author.uid}`} name={author.name}/>\n                <PostTags prefix=\" on \" tags={tags}/>\n                <PostDate date={date}/>\n              </footer>\n            </PostFormatting>);\r\n        })}\n      </div>);\r\n    }\r\n}\r\nexport default PostListing;\r\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\nimport Layout from \"../components/layout\";\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const category = this.props.pageContext.category;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    const authorsEdges = this.props.data.authors.edges;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} postAuthors={authorsEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n    # authors\n    authors: allAuthorsJson {\n      edges {\n        node {\n          uid\n          name\n          image\n          url\n          bio\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n"],"names":["AuthorThumbnail","_React$Component","apply","arguments","_inheritsLoose","prototype","render","_this$props","this","props","avatar","name","React","className","src","alt","PostListing","postEdges","authorEdges","postList","postAuthors","map","postEdge","path","node","fields","slug","tags","frontmatter","cover","title","date","author","AuthorModel","SiteConfig","excerpt","timeToRead","post","post_class","PostFormatting","key","PostHeader","Link","to","image","AuthorLink","url","uid","PostTags","prefix","PostDate","CategoryTemplate","category","pageContext","data","allMarkdownRemark","edges","authorsEdges","authors","Layout","location","Helmet","config"],"sourceRoot":""}